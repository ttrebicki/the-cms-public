{"version":3,"sources":["serviceWorker.ts","consts/env/index.ts","router/routes.ts","api/posts/index.ts","state/posts/thunks/index.ts","state/posts/slices/PostsManager.slice.ts","state/posts/slices/EditPost.slice.ts","state/store.ts","components/layout/SafeGrid/SafeGrid.styles.ts","components/layout/SafeGrid/SafeGrid.component.tsx","components/layout/SafeGrid/propMappers.ts","components/reusable/IconLink/IconLink.component.tsx","components/layout/Navbar/Navbar.component.tsx","components/molecules/ButtonRow/ButtonRow.component.tsx","components/layout/PageLayout/PageLayout.component.tsx","components/systems/PostsManager/PostsManager.header.ts","components/systems/PostsManager/components/PostsManagerTable/utils/buttons.ts","components/systems/PostsManager/components/PostsManagerTable/utils/columns.ts","components/systems/PostsManager/PostsManager.stylesMUI.ts","state/hooks.ts","components/systems/PostsManager/components/PostsManagerTable/PostsManagerTable.component.tsx","consts/texts/index.ts","components/systems/PostsManager/PostsManager.component.tsx","components/systems/EditPost/hooks/useFormik.ts","components/systems/EditPost/EditPost.header.ts","components/systems/EditPost/EditPost.styles.ts","components/systems/EditPost/EditPost.component.tsx","router/index.tsx","App.tsx","config/mui/mui.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Env","Routes","post","createConfig","url","API_URL","headers","data","Promise","resolve","reject","axios","method","response","id","editConfig","deleteConfig","getConfig","getPostsFromAPI","createAsyncThunk","_id","a","PostsApi","getPosts","createNewPost","parsedPost","JSON","stringify","replace","MANAGE_POSTS","editPost","deletePost","store","dispatch","PostsManagerSlice","createSlice","name","initialState","posts","selectedPost","status","reducers","setSelectedPost","action","getPostById","filter","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectPosts","postsManager","getSelectedPost","EditPostSlice","configureStore","reducer","EditPostReducer","PostsManagerReducer","useStyles","safeDirection","safePadding","safeSpacing","safeFillContainer","makeStyles","theme","createStyles","root","display","flexDirection","flexWrap","padding","marginRight","marginBottom","width","withBackground","background","palette","paper","mainColumn","margin","maxWidth","breakpoints","values","lg","childColumn","flex","childRow","SafeGrid","direction","spacing","fillContainer","elevation","children","paddingMapper","safeBackground","safeMainColumn","useTheme","classes","mappedChildren","Children","map","child","React","isValidElement","type","className","cn","IconLink","disabled","target","Link","href","IconButton","Navbar","AppBar","color","Toolbar","variant","HomeOutlined","HOME","ButtonRow","useState","isRedirect","setRedirect","index","to","pathname","getState","Button","onClick","label","callback","PageLayoutHeader","title","Typography","PageLayoutContent","postsManageActions","CREATE_POST","belowTableButtons","EDIT_POST","columns","field","headerName","table","height","useAppDispatch","useDispatch","useAppSelector","useSelector","PostsManagerTable","rows","postContent","content","postTitle","friendlyCreateDate","friendly_create_date","thumbnailUrl","thumbnailImage","pageSize","onRowClick","row","texts","footer","copyright","postManager","createPost","updatePost","header","managePosts","managePostsDesc","PostsManager","txt","useEffect","useFormikHook","isCreate","isEdit","useFormik","initialValues","images","onSubmit","createPostPayload","editPostPayload","editPostActions","editor","minHeight","overflowY","EditPost","usage","formik","txts","headingText","ctaButtonText","handleSubmit","TextField","onChange","handleChange","value","required","fullWidth","appKey","success","files","clipboard","writeText","link","cancel","multiselect","defaultValue","dark","autoFocus","size","readOnly","Router","exact","path","App","CssBaseline","createMuiTheme","overrides","MuiIcon","colorPrimary","MuiToolbar","dense","justifyContent","primary","contrastText","main","secondary","default","text","typography","fontFamily","join","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dfa3bbd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","export enum Env {\n\tAPI_URL = 'https://radiant-sea-35276.herokuapp.com/api'\n}\n","export enum Routes {\n\tCREATE_POST = '/create-post',\n\tEDIT_POST = '/edit-post',\n\tHOME = '/',\n\tMANAGE_POSTS = '/manage-posts',\n}\n","import axios from 'axios';\nimport { INewPostResponse } from './types';\nimport { Env } from '../../consts/env';\n\nclass PostsApi {\n\tpublic createNewPost(post: string): Promise<INewPostResponse> {\n\t\tconst createConfig = {\n\t\t\turl: `${Env.API_URL}/posts`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tdata: post,\n\t\t};\n\n\t\treturn new Promise<INewPostResponse>((resolve, reject) => {\n\t\t\taxios({ ...createConfig, method: 'POST' })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresolve(response.data);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic editPost(id: string, post: string): Promise<INewPostResponse> {\n\t\tconst editConfig = {\n\t\t\turl: `${Env.API_URL}/posts/${id}`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tdata: post,\n\t\t};\n\n\t\treturn new Promise<INewPostResponse>((resolve, reject) => {\n\t\t\taxios({ ...editConfig, method: 'PUT' })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresolve(response.data);\n\t\t\t\t})\n\t\t\t\t.catch((error) => reject(error));\n\t\t});\n\t}\n\n\tpublic deletePost(id: string): Promise<void> {\n\t\tconst deleteConfig = {\n\t\t\turl: `${Env.API_URL}/posts/${id}`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\taxios({ ...deleteConfig, method: 'DELETE' })\n\t\t\t\t.then((response) => resolve(response.data))\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic getPosts(id?: string): Promise<INewPostResponse> {\n\t\tconst getConfig = {\n\t\t\turl: id\n\t\t\t\t? `${Env.API_URL}/posts/${id}`\n\t\t\t\t: `${Env.API_URL}/posts`,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t};\n\n\t\treturn new Promise<INewPostResponse>((resolve, reject) => {\n\t\t\taxios({ ...getConfig, method: 'GET' })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tresolve(response.data);\n\t\t\t\t})\n\t\t\t\t.catch((error) => reject(error));\n\t\t});\n\t}\n}\n\nexport default new PostsApi();\n","import { createAsyncThunk } from '@reduxjs/toolkit';\n\nimport PostsApi from '../../../api/posts';\nimport { IEditPostPayload } from '../../../components/systems/EditPost/EditPost.types';\nimport { IPostFormData } from '../slices/types';\nimport { store } from '../../store';\nimport { Routes } from '../../../router/routes';\n\nconst getPostsFromAPI = createAsyncThunk(\n\t'getPostsFromAPI',\n\tasync (_id?: string) => {\n\t\tconst { data } = await PostsApi.getPosts(_id && _id);\n\n\t\treturn data;\n\t}\n);\nconst createNewPost = createAsyncThunk(\n\t'createNewPost',\n\tasync (post: IPostFormData) => {\n\t\tconst parsedPost = JSON.stringify(post);\n\n\t\tawait PostsApi.createNewPost(parsedPost)\n\n\t\twindow.location.replace(Routes.MANAGE_POSTS)\n\t}\n);\nconst editPost = createAsyncThunk(\n\t'editPost',\n\tasync (post: IEditPostPayload) => {\n\t\tconst parsedPost = JSON.stringify(post.post);\n\n\t\tawait PostsApi.editPost(post.id, parsedPost);\n\t}\n);\nconst deletePost = createAsyncThunk('deletePost', async (id: string) => {\n\tawait PostsApi.deletePost(id).then(() => store.dispatch(getPostsFromAPI()));\n});\n\nexport { deletePost, getPostsFromAPI, editPost, createNewPost };\n","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../store';\nimport { getPostsFromAPI } from '../thunks';\nimport { PostsManagerState } from './types';\n\nconst initialState: PostsManagerState = {\n\tposts: [],\n\tselectedPost: null,\n\tstatus: 'idle',\n};\n\nexport const PostsManagerSlice = createSlice({\n\tname: 'PostsManager',\n\tinitialState,\n\treducers: {\n\t\tsetSelectedPost(state, action) {\n\t\t\tconst getPostById = state.posts.filter(\n\t\t\t\t(post) => post._id === action.payload\n\t\t\t);\n\n\t\t\tstate.selectedPost = getPostById[0];\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(getPostsFromAPI.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(getPostsFromAPI.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t\tstate.posts = action.payload;\n\t\t\t});\n\t},\n});\n\nexport const { setSelectedPost } = PostsManagerSlice.actions;\nexport const selectPosts = (state: RootState) => state.postsManager.posts;\nexport const getSelectedPost = (state: RootState) =>\n\tstate.postsManager.selectedPost;\n\nexport default PostsManagerSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { createNewPost, editPost, deletePost } from '../thunks';\nimport { EditPostState } from './types';\n\nconst initialState: EditPostState = {\n\tpost: null,\n\tstatus: 'idle',\n};\n\nexport const EditPostSlice = createSlice({\n\tname: 'EditPost',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(createNewPost.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(createNewPost.fulfilled, (state) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t})\n\t\t\t.addCase(editPost.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(editPost.fulfilled, (state) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t})\n\t\t\t.addCase(deletePost.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(deletePost.fulfilled, (state) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t});\n\t},\n});\n\nexport default EditPostSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\nimport PostsManagerReducer from './posts/slices/PostsManager.slice';\nimport EditPostReducer from './posts/slices/EditPost.slice';\n\nexport const store = configureStore({\n\treducer: {\n\t\teditPost: EditPostReducer,\n\t\tpostsManager: PostsManagerReducer,\n\t},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { ISafeGridStyleProps } from './SafeGrid.types';\n\nconst useStyles = ({\n\tsafeDirection,\n\tsafePadding,\n\tsafeSpacing,\n\tsafeFillContainer,\n}: ISafeGridStyleProps) =>\n\tmakeStyles((theme: Theme) =>\n\t\tcreateStyles({\n\t\t\troot: {\n\t\t\t\tdisplay: 'flex',\n\t\t\t\tflexDirection: safeDirection,\n\t\t\t\tflexWrap: 'wrap',\n\t\t\t\tpadding: safePadding,\n\t\t\t\tmarginRight: safeDirection === 'column' ? -safeSpacing : 0,\n\t\t\t\tmarginBottom: safeDirection === 'row' ? -safeSpacing : 0,\n\t\t\t\twidth: '100%',\n\t\t\t},\n\t\t\twithBackground: {\n\t\t\t\tbackground: theme.palette.background.paper,\n\t\t\t},\n\t\t\tmainColumn: {\n\t\t\t\tmargin: 'auto !important',\n\t\t\t\tmaxWidth: theme.breakpoints.values.lg,\n\t\t\t},\n\t\t\tchildColumn: {\n\t\t\t\tflex: safeFillContainer ? '1' : 'unset',\n\t\t\t\tflexDirection: safeDirection,\n\t\t\t\tmarginBottom: safeSpacing,\n\t\t\t\t'& :last-of-type': {\n\t\t\t\t\tmarginBottom: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t\tchildRow: {\n\t\t\t\tflex: safeFillContainer ? '1' : 'unset',\n\t\t\t\tflexDirection: safeDirection,\n\t\t\t\tmarginBottom: safeSpacing,\n\t\t\t\tmarginRight: safeSpacing,\n\t\t\t\t'& :last-of-type': {\n\t\t\t\t\tmarginRight: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t);\n\nexport default useStyles;\n","import React, { Children, FC } from 'react';\n\nimport cn from 'classnames';\n\nimport { paddingMapper } from './propMappers';\nimport { ISafeGrid } from './SafeGrid.types';\nimport useStyles from './SafeGrid.styles';\nimport { useTheme } from '@material-ui/core';\n\nconst SafeGrid: FC<ISafeGrid> = ({\n\tdirection,\n\tpadding,\n\tspacing,\n\tbackground,\n\televation,\n\tfillContainer,\n\tmainColumn,\n\tchildren,\n}) => {\n\tconst safeDirection = direction ? direction : 'column';\n\tconst safePadding = padding ? paddingMapper(padding) : '0';\n\tconst safeSpacing = spacing ? spacing : 0;\n\tconst safeBackground = background ? background : false;\n\t// const safeElevation = elevation ? elevation : false;\n\tconst safeFillContainer = fillContainer ? fillContainer : false;\n\tconst safeMainColumn = mainColumn ? mainColumn : false;\n\t// setting up default values if props are not provided\n\n\tconst theme = useTheme();\n\tconst classes = useStyles({\n\t\tsafeDirection,\n\t\tsafeFillContainer,\n\t\tsafePadding,\n\t\tsafeSpacing,\n\t})(theme);\n\n\tconst mappedChildren = Children.map(children, (child) => {\n\t\tif (child === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tReact.isValidElement(child) &&\n\t\t\t(child as React.ReactElement<any>).type === SafeGrid\n\t\t) {\n\t\t\treturn child;\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\tsafeDirection && safeDirection === 'row'\n\t\t\t\t\t\t? classes.childRow\n\t\t\t\t\t\t: classes.childColumn,\n\t\t\t\t\tsafeBackground && classes.withBackground\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{child}\n\t\t\t</div>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\tclasses.root,\n\t\t\t\tsafeDirection && safeDirection === 'row'\n\t\t\t\t\t? classes.childRow\n\t\t\t\t\t: classes.childColumn,\n\t\t\t\tsafeBackground && classes.withBackground,\n\t\t\t\tsafeMainColumn && classes.mainColumn\n\t\t\t)}\n\t\t>\n\t\t\t{mappedChildren}\n\t\t</div>\n\t);\n};\n\nexport default SafeGrid;\n","const paddingMapper = (padding: string | number) => {\n\tswitch (padding) {\n\t\tcase '0':\n\t\tcase 0:\n\t\t\treturn '0';\n\n\t\tcase '16':\n\t\tcase 16:\n\t\t\treturn '16px';\n\n\t\tcase '32':\n\t\tcase 32:\n\t\t\treturn '32px';\n\n\t\tdefault:\n\t\t\treturn '0';\n\t}\n};\n\nexport { paddingMapper };\n","import { FC } from 'react';\n\nimport { IconButton, Link } from '@material-ui/core';\n\nimport { IIconLinkPassedProps } from './IconLink.types';\n\nconst IconLink: FC<IIconLinkPassedProps> = ({\n\tchildren,\n\tdisabled,\n\ttarget,\n\turl,\n}) => {\n\treturn (\n\t\t<Link href={url} target={target}>\n\t\t\t<IconButton disabled={disabled}>{children}</IconButton>\n\t\t</Link>\n\t);\n};\n\nexport default IconLink;\n","import React from 'react';\n\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { HomeOutlined } from '@material-ui/icons';\n\nimport SafeGrid from '../SafeGrid/SafeGrid.component';\nimport IconLink from '../../reusable/IconLink';\nimport { Routes } from '../../../router/routes';\n\nconst Navbar = () => {\n\treturn (\n\t\t<>\n\t\t\t<AppBar color={'secondary'} elevation={0}>\n\t\t\t\t<SafeGrid mainColumn>\n\t\t\t\t\t<Toolbar variant={'dense'}>\n\t\t\t\t\t\t<IconLink\n\t\t\t\t\t\t\tchildren={<HomeOutlined color={'primary'} />}\n\t\t\t\t\t\t\turl={Routes.HOME}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</SafeGrid>\n\t\t\t</AppBar>\n\t\t</>\n\t);\n};\n\nexport default Navbar;\n","import React, { useState } from 'react';\n\nimport { Button } from '@material-ui/core';\n\nimport SafeGrid from '../../layout/SafeGrid/SafeGrid.component';\nimport { IButtonRowProps } from './ButtonRow.types';\nimport { Redirect } from 'react-router-dom';\nimport { store } from '../../../state/store';\n\nconst ButtonRow = ({ actions }: IButtonRowProps) => {\n\tconst [isRedirect, setRedirect] = useState(false);\n\n\t/* TODO: refactor links */\n\treturn (\n\t\t<SafeGrid spacing={8} direction={'row'}>\n\t\t\t{actions.map((action, index) => {\n\t\t\t\tif (action.href) {\n\t\t\t\t\tif (isRedirect) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Redirect\n\t\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\t\tpathname: action.href,\n\t\t\t\t\t\t\t\t\tstate: store.getState(),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\tonClick={() => setRedirect(true)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{action.label}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (index === 0) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\tonClick={action.callback}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{action.label}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tonClick={action.callback}\n\t\t\t\t\t>\n\t\t\t\t\t\t{action.label}\n\t\t\t\t\t</Button>\n\t\t\t\t);\n\t\t\t})}\n\t\t</SafeGrid>\n\t);\n};\n\nexport default ButtonRow;\n","import React, { FC } from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nimport SafeGrid from '../SafeGrid/SafeGrid.component';\nimport { IPageLayoutHeaderProps } from './PageLayout.types';\nimport ButtonRow from '../../molecules/ButtonRow/ButtonRow.component';\n\nconst PageLayoutHeader = ({ title, actions }: IPageLayoutHeaderProps) => {\n\treturn (\n\t\t<SafeGrid spacing={32} padding={32} background elevation>\n\t\t\t<Typography variant={'h2'}>{title}</Typography>\n\t\t\t{actions && <ButtonRow actions={actions} />}\n\t\t</SafeGrid>\n\t);\n};\n\nconst PageLayoutContent: FC = ({ children }) => {\n\treturn (\n\t\t<SafeGrid spacing={32} padding={32} direction={'column'} background elevation>\n\t\t\t{children}\n\t\t</SafeGrid>\n\t);\n};\n\nexport { PageLayoutHeader, PageLayoutContent };\n","import { IAction } from '../../layout/PageLayout/PageLayout.types';\nimport { Routes } from '../../../router/routes';\n\nconst postsManageActions: IAction[] = [\n\t{\n\t\thref: Routes.CREATE_POST,\n\t\tlabel: 'Create New Post',\n\t},\n];\n\nexport default postsManageActions;\n","import { store } from '../../../../../../state/store';\nimport { deletePost } from '../../../../../../state/posts/thunks';\nimport { Routes } from '../../../../../../router/routes';\nimport { IAction } from '../../../../../layout/PageLayout/PageLayout.types';\n\nconst belowTableButtons = ({ id }: { id: string }): IAction[] => [\n\t{\n\t\thref: Routes.EDIT_POST,\n\t\tlabel: 'Edit',\n\t},\n\t{\n\t\tcallback: () => {\n\t\t\tstore.dispatch(deletePost(id));\n\t\t},\n\t\tlabel: 'Delete',\n\t},\n];\n\nexport default belowTableButtons;\n","const columns = [\n\t{\n\t\tfield: 'postTitle',\n\t\theaderName: 'Post Title',\n\t\twidth: 160,\n\t},\n\t{\n\t\tfield: 'friendlyCreateDate',\n\t\theaderName: 'Created',\n\t\twidth: 240,\n\t},\n\t{\n\t\tfield: 'thumbnailUrl',\n\t\theaderName: 'Thumbnail Image Url',\n\t\twidth: 160,\n\t},\n\t{\n\t\tfield: 'postContent',\n\t\theaderName: 'Post Content',\n\t\twidth: 600,\n\t},\n];\n\nexport default columns;\n","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\theight: 432,\n\t},\n});\n\nexport default useStyles;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\n\nimport { DataGrid } from '@material-ui/data-grid';\n\nimport SafeGrid from '../../../../layout/SafeGrid/SafeGrid.component';\nimport ButtonRow from '../../../../molecules/ButtonRow/ButtonRow.component';\nimport belowTableButtons from './utils/buttons';\nimport columns from './utils/columns';\nimport useStyles from '../../PostsManager.stylesMUI';\nimport {\n\tgetSelectedPost,\n\tselectPosts,\n\tsetSelectedPost,\n} from '../../../../../state/posts/slices/PostsManager.slice';\nimport { useAppDispatch, useAppSelector } from '../../../../../state/hooks';\n\nconst PostsManagerTable = () => {\n\tconst dispatch = useAppDispatch();\n\tconst posts = useAppSelector(selectPosts);\n\tconst selectedPost = useAppSelector(getSelectedPost);\n\n\tconst rows = posts.map((post) => {\n\t\treturn {\n\t\t\tid: post._id,\n\t\t\tpostContent: post.content,\n\t\t\tpostTitle: post.title,\n\t\t\tfriendlyCreateDate: post.friendly_create_date,\n\t\t\tthumbnailUrl: post.thumbnailImage,\n\t\t};\n\t});\n\n\tconst classes = useStyles();\n\n\tif (!posts) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<SafeGrid spacing={16}>\n\t\t\t{selectedPost && (\n\t\t\t\t<ButtonRow\n\t\t\t\t\tactions={belowTableButtons({\n\t\t\t\t\t\tid: selectedPost._id,\n\t\t\t\t\t})}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<div className={classes.table}>\n\t\t\t\t<DataGrid\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\trows={rows}\n\t\t\t\t\tpageSize={6}\n\t\t\t\t\tonRowClick={(row) => {\n\t\t\t\t\t\tdispatch(setSelectedPost(row.id));\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</SafeGrid>\n\t);\n};\n\nexport default PostsManagerTable;\n","const texts = {\n\tfooter: {\n\t\tcopyright: 'Copyright 2021 hmm.xd',\n\t},\n\tpostManager: {\n\t\teditPost: {\n\t\t\tcreatePost: 'Create post',\n\t\t\teditPost: 'Edit post',\n\t\t\tupdatePost: 'Update post',\n\t\t},\n\t\theader: 'Posts manager',\n\t\tmanagePosts: 'Manage your posts',\n\t\tmanagePostsDesc:\n\t\t\t'Here you can make changes to your posts, arrange them or delete them.',\n\t},\n};\n\nexport default texts;\n","import React, { useEffect } from 'react';\n\nimport { Typography } from '@material-ui/core';\n\nimport {\n\tPageLayoutContent,\n\tPageLayoutHeader,\n} from '../../layout/PageLayout/PageLayout.component';\nimport SafeGrid from '../../layout/SafeGrid/SafeGrid.component';\nimport postsManageActions from './PostsManager.header';\nimport PostsManagerTable from './components/PostsManagerTable/PostsManagerTable.component';\nimport { getPostsFromAPI } from '../../../state/posts/thunks';\nimport texts from '../../../consts/texts';\nimport { useAppDispatch } from '../../../state/hooks';\n\nconst PostsManager = () => {\n\tconst dispatch = useAppDispatch();\n\tconst txt = texts.postManager;\n\n\tuseEffect(() => {\n\t\tdispatch(getPostsFromAPI());\n\t});\n\n\treturn (\n\t\t<SafeGrid spacing={32}>\n\t\t\t<PageLayoutHeader title={txt.header} actions={postsManageActions} />\n\t\t\t<PageLayoutContent>\n\t\t\t\t<SafeGrid spacing={32}>\n\t\t\t\t\t<SafeGrid spacing={16}>\n\t\t\t\t\t\t<Typography variant={'h4'}>{txt.managePosts}</Typography>\n\t\t\t\t\t\t<Typography variant={'body1'}>{txt.managePostsDesc}</Typography>\n\t\t\t\t\t\t<PostsManagerTable />\n\t\t\t\t\t</SafeGrid>\n\t\t\t\t</SafeGrid>\n\t\t\t</PageLayoutContent>\n\t\t</SafeGrid>\n\t);\n};\n\nexport default PostsManager;\n","import { useFormik } from 'formik';\n\nimport { createNewPost, editPost } from '../../../../state/posts/thunks';\nimport { useAppDispatch } from '../../../../state/hooks';\nimport { IFormikProps } from '../EditPost.types';\nimport { Routes } from '../../../../router/routes';\n\nconst useFormikHook = ({ isCreate, isEdit, selectedPost }: IFormikProps) => {\n\tconst dispatch = useAppDispatch();\n\n\treturn useFormik({\n\t\tinitialValues:\n\t\t\tisEdit && selectedPost\n\t\t\t\t? {\n\t\t\t\t\t\tcontent: selectedPost.content,\n\t\t\t\t\t\tthumbnailImage: selectedPost.thumbnailImage,\n\t\t\t\t\t\ttitle: selectedPost.title,\n\t\t\t\t\t\t'images[0]': selectedPost.images[0],\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\tcontent: '',\n\t\t\t\t\t\tthumbnailImage: '',\n\t\t\t\t\t\ttitle: '',\n\t\t\t\t\t\t'images[0]': '',\n\t\t\t\t  },\n\t\tonSubmit: (values) => {\n\t\t\tconst createPostPayload = values;\n\t\t\tconst editPostPayload = {\n\t\t\t\tid: selectedPost ? selectedPost._id : 'id_unknown',\n\t\t\t\tpost: values,\n\t\t\t};\n\n\t\t\tisCreate\n\t\t\t\t? dispatch(createNewPost(createPostPayload))\n\t\t\t\t: dispatch(editPost(editPostPayload));\n\t\t},\n\t});\n};\n\nexport default useFormikHook;\n","import { IAction } from '../../layout/PageLayout/PageLayout.types';\nimport { Routes } from '../../../router/routes';\n\nconst editPostActions: IAction[] = [\n\t{\n\t\thref: Routes.HOME,\n\t\tlabel: 'Back',\n\t},\n];\n\nexport default editPostActions;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\teditor: {\n\t\t\t'& > div': {\n\t\t\t\tminHeight: '100vh',\n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tpadding: 32,\n\t\t\t},\n\t\t\theight: '100vh',\n\t\t\toverflowY: 'hidden',\n\t\t},\n\t})\n);\n\nexport default useStyles;\n","import React, { createRef, useEffect, useState } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { Button, TextField, useTheme } from '@material-ui/core';\nimport Editor from 'rich-markdown-editor';\nimport DropboxChooser from 'react-dropbox-chooser';\n\nimport { getSelectedPost } from '../../../state/posts/slices/PostsManager.slice';\nimport SafeGrid from '../../layout/SafeGrid/SafeGrid.component';\nimport { IEditPostProps } from './EditPost.types';\nimport texts from '../../../consts/texts';\nimport useFormikHook from './hooks/useFormik';\nimport { PageLayoutHeader } from '../../layout/PageLayout/PageLayout.component';\nimport editPostActions from './EditPost.header';\nimport useStyles from './EditPost.styles';\n\nconst EditPost = ({ usage }: IEditPostProps) => {\n\tconst selectedPost = useSelector(getSelectedPost);\n\tconst isCreate = usage === 'create';\n\tconst isEdit = usage === 'edit';\n\tconst formik = useFormikHook({ isCreate, isEdit, selectedPost });\n\tconst txts = texts.postManager.editPost;\n\tconst headingText = isCreate ? txts.createPost : txts.editPost;\n\tconst ctaButtonText = isCreate ? txts.createPost : txts.updatePost;\n\n\tconst handleChange = (value: () => string) => {\n\t\tformik.values.content = value();\n\t}\n\n\tconst theme = useTheme();\n\tconst classes = useStyles(theme);\n\n\treturn (\n\t\t<SafeGrid spacing={32}>\n\t\t\t<PageLayoutHeader title={headingText} actions={editPostActions} />\n\t\t\t<form onSubmit={formik.handleSubmit} className={'form'}>\n\t\t\t\t<SafeGrid spacing={16}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\tid={'title'}\n\t\t\t\t\t\tname={'title'}\n\t\t\t\t\t\ttype={'title'}\n\t\t\t\t\t\tvalue={formik.values.title}\n\t\t\t\t\t\tvariant={'outlined'}\n\t\t\t\t\t\tlabel={'Title'}\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\tid={'thumbnailImage'}\n\t\t\t\t\t\tname={'thumbnailImage'}\n\t\t\t\t\t\ttype={'thumbnailImage'}\n\t\t\t\t\t\tvalue={formik.values.thumbnailImage}\n\t\t\t\t\t\tvariant={'outlined'}\n\t\t\t\t\t\tlabel={'Thumbnail Image URL'}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t/>\n\t\t\t\t\t<DropboxChooser appKey={'a0kj2d0xe9aw6se'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess={(files: any) => window.navigator.clipboard.writeText(files[0].link)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcancel={() => console.log('closed')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmultiselect={true}>\n\t\t\t\t\t\t<Button type={'button'}>Dropbox</Button>\n\t\t\t\t\t</DropboxChooser>\n\t\t\t\t\t<Editor\n\t\t\t\t\t\tclassName={classes.editor}\n\t\t\t\t\t\tdefaultValue={formik.values.content}\n\t\t\t\t\t\tdark={true}\n\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant={'outlined'}\n\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\ttype={'submit'}\n\t\t\t\t\t\tsize={'large'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{ctaButtonText}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Editor\n\t\t\t\t\t\treadOnly={true}\n\t\t\t\t\t\tvalue={formik.values.content}\n\t\t\t\t\t\tdark={true}\n\t\t\t\t\t\tclassName={classes.editor}\n\t\t\t\t\t/>\n\t\t\t\t</SafeGrid>\n\t\t\t</form>\n\t\t</SafeGrid>\n\t);\n};\n\nexport default EditPost;\n","import React from 'react';\n\nimport { Route, Switch, HashRouter } from 'react-router-dom';\n\nimport { Routes } from './routes';\nimport PostsManager from '../components/systems/PostsManager/PostsManager.component';\nimport EditPost from '../components/systems/EditPost/EditPost.component';\n\nconst Router = () => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path={Routes.CREATE_POST}>\n\t\t\t\t\t<EditPost usage={'create'} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path={Routes.EDIT_POST}>\n\t\t\t\t\t<EditPost usage={'edit'} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path={Routes.HOME}>\n\t\t\t\t\t<PostsManager />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</HashRouter>\n\t);\n};\n\nexport default Router;\n","import React from 'react';\n\nimport { CssBaseline, Typography } from '@material-ui/core';\n\nimport SafeGrid from './components/layout/SafeGrid/SafeGrid.component';\nimport Navbar from './components/layout/Navbar/Navbar.component';\nimport Router from './router';\nimport texts from './consts/texts';\n\nconst App = () => {\n\treturn (\n\t\t<>\n\t\t\t<CssBaseline />\n\t\t\t<SafeGrid spacing={80} mainColumn>\n\t\t\t\t<Navbar />\n\t\t\t\t<Router />\n\t\t\t\t<SafeGrid spacing={32} padding={32} background>\n\t\t\t\t\t<Typography variant={'caption'}>{texts.footer.copyright}</Typography>\n\t\t\t\t</SafeGrid>\n\t\t\t</SafeGrid>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n\toverrides: {\n\t\tMuiIcon: {\n\t\t\tcolorPrimary: {\n\t\t\t\tcolor: '#80d8ff',\n\t\t\t},\n\t\t},\n\t\tMuiToolbar: {\n\t\t\tdense: {\n\t\t\t\tjustifyContent: 'right',\n\t\t\t},\n\t\t},\n\t},\n\tpalette: {\n\t\tprimary: {\n\t\t\tcontrastText: '#1b1b1b',\n\t\t\tmain: '#80d8ff',\n\t\t},\n\t\tsecondary: {\n\t\t\tcontrastText: '#efefef',\n\t\t\tmain: '#1b1b1b',\n\t\t},\n\t\tbackground: {\n\t\t\tdefault: '#1b1b1b',\n\t\t\tpaper: '#2b2b2b',\n\t\t},\n\t\ttext: {\n\t\t\tprimary: '#eeeeee',\n\t\t\tsecondary: '#dddddd',\n\t\t},\n\t},\n\ttypography: {\n\t\tfontFamily: ['Poppins', 'sans-serif'].join(','),\n\t},\n});\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './state/store';\nimport App from './App';\nimport { theme } from './config/mui/mui';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<App />\n\t\t\t</ThemeProvider>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}